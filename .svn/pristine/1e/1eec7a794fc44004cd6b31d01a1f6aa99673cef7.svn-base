Exam #2 score (thouchi2): 25/200

=== Grade Feedback for Problem "programming_bigThree_createCopyCtor_garden" ===
=====
[0/100]

--- stdout ---
g++ flower.cpp -std=c++1y -c -g -O0 -Wall -Wextra -pedantic
g++ garden.cpp -std=c++1y -c -g -O0 -Wall -Wextra -pedantic


--- stderr ---
garden.cpp: In copy constructor ‘garden::garden(const garden&)’:
garden.cpp:21:39: error: expected ‘]’ before ‘)’ token
         this->grid[i][j] = *source[i*4) + j];
                                       ^
garden.cpp:21:35: error: no match for ‘operator[]’ (operand types are ‘const garden’ and ‘int’)
         this->grid[i][j] = *source[i*4) + j];
                                   ^
garden.cpp:21:39: error: expected ‘;’ before ‘)’ token
         this->grid[i][j] = *source[i*4) + j];
                                       ^
garden.cpp:25:53: error: a function-definition is not allowed here before ‘{’ token
 flower garden::getFlower(int row, int column) const {
                                                     ^
garden.cpp:29:62: error: a function-definition is not allowed here before ‘{’ token
 void garden::setFlower(int row, int column, const flower &f) {
                                                              ^
garden.cpp:31:1: error: expected ‘}’ at end of input
 }
 ^
make: *** [garden.o] Error 1


--- submitted file: garden.cpp ---
#include "flower.h"
#include "garden.h"

garden::garden(flower *flowers) {
  this->grid = new flower*[4];

  for (int i = 0; i < 4; i++) {
    this->grid[i] = new flower[4];
    for (int j = 0; j < 4; j++) {
        this->grid[i][j] = flowers[(i*4) + j];
    }
  }
}

garden::garden(const garden & source){
  this->grid = new flower*[4];

  for (int i = 0; i < 4; i++) {
    this->grid[i] = new flower[4];
    for (int j = 0; j < 4; j++) {
        this->grid[i][j] = *source[i*4) + j];
    }
  }

flower garden::getFlower(int row, int column) const {
  return this->grid[row][column];
}

void garden::setFlower(int row, int column, const flower &f) {
  this->grid[row][column] = f;
}

--- submitted file: garden.h ---
#ifndef _GARDEN_H
#define _GARDEN_H

#include "flower.h"

class garden {
public:
  garden(flower *flowers);

  flower getFlower(int row, int column) const;
  void setFlower(int row, int column, const flower &f);

  garden(const garden & source);

private:
  flower **grid;
};

#endif


=== Grade Feedback for Problem "programming_operator_plus_backpack" ===
[0/25]: Test: backpack member functions after adding backpacks
[25/25]: Test: add an empty backpack to a backpack
[0/25]: Test: add backpack to an empty backpack
[0/25]: Test: add two full backpacks together
=====
[25/100]

--- stdout ---
g++ backpack.cpp -std=c++1y -c -g -O0 -Wall -Wextra -pedantic
g++ backpack-test.cpp -std=c++1y -c -g -O0 -Wall -Wextra -pedantic
g++ backpack.o backpack-test.o -std=c++1y -lpng -lpthread -o catch-tester

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
catch-tester is a Catch v1.8.1 host application.
Run with -? for options

-------------------------------------------------------------------------------
backpack member functions after adding backpacks
  contents correct
-------------------------------------------------------------------------------
backpack-test.cpp:63
...............................................................................

backpack-test.cpp:74: FAILED:
  CHECK( c == expected )
with expansion:
  {?} == {?}

===============================================================================
test cases: 1 | 1 failed
assertions: 3 | 2 passed | 1 failed

===============================================================================
All tests passed (3 assertions in 1 test case)


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
catch-tester is a Catch v1.8.1 host application.
Run with -? for options

-------------------------------------------------------------------------------
add backpack to an empty backpack
  contents correct
-------------------------------------------------------------------------------
backpack-test.cpp:120
...............................................................................

backpack-test.cpp:123: FAILED:
  CHECK( c == expected )
with expansion:
  {?} == {?}

===============================================================================
test cases: 1 | 1 failed
assertions: 3 | 2 passed | 1 failed


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
catch-tester is a Catch v1.8.1 host application.
Run with -? for options

-------------------------------------------------------------------------------
add two full backpacks together
  contents correct
-------------------------------------------------------------------------------
backpack-test.cpp:146
...............................................................................

backpack-test.cpp:152: FAILED:
  CHECK( c == expected )
with expansion:
  {?} == {?}

===============================================================================
test cases: 1 | 1 failed
assertions: 3 | 2 passed | 1 failed


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
catch-tester is a Catch v1.8.1 host application.
Run with -? for options

-------------------------------------------------------------------------------
backpack member functions after adding backpacks
  contents correct
-------------------------------------------------------------------------------
backpack-test.cpp:63
...............................................................................

backpack-test.cpp:74: FAILED:
  CHECK( c == expected )
with expansion:
  {?} == {?}

-------------------------------------------------------------------------------
add an empty backpack to a backpack
  contents correct
-------------------------------------------------------------------------------
backpack-test.cpp:96
...............................................................................

backpack-test.cpp:96: FAILED:
due to a fatal error condition:
  SIGSEGV - Segmentation violation signal

===============================================================================
test cases: 2 | 2 failed
assertions: 6 | 4 passed | 2 failed



--- stderr ---


--- submitted file: backpack.cpp ---
#include "backpack.h"

//
// In the `backpack` class, overload the `+` (plus) operator to add two
// `backpack` classes.
//
// The result must be a `backpack` where:
// - the result `size` is the sum of the `size` of each individual backpack, and
// - the items (`items` and `item_weights`) in the result are the items from
//  both backpacks
//

backpack::backpack(int size) : size(size), items(0) {
  this->item_weights = new int[size];
}

bool backpack::addItem(int weight) {
  if (items == size) {
    // Cannot add if the backpack is full of items
    return false;
  } else {
    // Otherwise, add the item
    this->item_weights[this->items] = weight;
    this->items++;
    return true;
  }
}

backpack backpack::operator+(backpack a){
  backpack t = backpack(0);
  t.size = size + a.size;
  t.items = items + a.items;
  t.item_weights = item_weights + *a.item_weights;
  return t;
}

int backpack::getSize() const {
  return this->size;
}

int backpack::getItemCount() const {
  return this->items;
}

const int *backpack::getItems() const {
  return this->item_weights;
}

--- submitted file: backpack.h ---
#ifndef _BACKPACK_H
#define _BACKPACK_H

//
// In the `backpack` class, overload the `+` (plus) operator to add two
// `backpack` classes.
//
// The result must be a `backpack` where:
// - the result `size` is the sum of the `size` of each individual backpack, and
// - the items (`items` and `item_weights`) in the result are the items from
//  both backpacks
//

class backpack {
public:
  backpack(int size);

  int getSize() const;
  int getItemCount() const;
  const int *getItems() const;
  bool addItem(int weight);
  backpack operator+(backpack a);

private:
  int size;
  int items;
  int *item_weights;
};

#endif


