/**
 * @file quadtree.cpp
 * Quadtree class implementation.
 * @date Spring 2008
 */

#include "quadtree.h"
#include <iostream>
#include <cmath>
using namespace std;

Quadtree::Quadtree(){
    root = NULL;
}

void Quadtree::buildTree(PNG const & source, int resolution){
    root = new QuadtreeNode(resolution);
    BTHelper(source, resolution, root, 0, 0);
}

void Quadtree::BTHelper(PNG const & source, int resolution, QuadtreeNode *croot, int x, int y){
    if(resolution == 1){
        croot->element = *(source(x, y));

        croot->nwChild = NULL;
		croot->neChild = NULL;
		croot->swChild = NULL;
		croot->seChild = NULL;
        return;
    }

    croot->nwChild = new QuadtreeNode(resolution/2);
    croot->neChild = new QuadtreeNode(resolution/2);
    croot->swChild = new QuadtreeNode(resolution/2);
    croot->seChild = new QuadtreeNode(resolution/2);

    BTHelper(source, resolution/2, croot->nwChild, x, y);
    BTHelper(source, resolution/2, croot->neChild, x + croot->res/2, y);
    BTHelper(source, resolution/2, croot->swChild, x, y + croot->res/2);
    BTHelper(source, resolution/2, croot->seChild, x + croot->res/2, y + croot->res/2);

    croot->element.red = (croot->nwChild->element.red + croot->neChild->element.red + croot->swChild->element.red + croot->seChild->element.red)/4;
    croot->element.green = (croot->nwChild->element.green + croot->neChild->element.green + croot->swChild->element.green + croot->seChild->element.green)/4;
    croot->element.blue = (croot->nwChild->element.blue + croot->neChild->element.blue + croot->swChild->element.blue + croot->seChild->element.blue)/4;
}

Quadtree::Quadtree(PNG const & source, int resolution){
    buildTree(source, resolution);
}

Quadtree::Quadtree(Quadtree const & other){
    if(other.root != NULL)
        root = copy(other.root);
    else{
        root = NULL;
        return;
    }
}

Quadtree::~Quadtree(){
    clear(root);
}

Quadtree::QuadtreeNode * Quadtree::copy(QuadtreeNode *oldRoot){
    if(oldRoot == NULL)
        return NULL;
    QuadtreeNode *newRoot = new QuadtreeNode(oldRoot);
    newRoot->nwChild = copy(oldRoot->nwChild);
    newRoot->neChild = copy(oldRoot->neChild);
    newRoot->swChild = copy(oldRoot->swChild);
    newRoot->seChild = copy(oldRoot->seChild);
    return newRoot;
}

void Quadtree::clear(QuadtreeNode * & croot){
    if(croot == NULL)
        return;
    clear(croot->nwChild);
    clear(croot->neChild);
    clear(croot->swChild);
    clear(croot->seChild);

    delete croot;
    croot = NULL;
}

Quadtree const & Quadtree::operator= (Quadtree const & other){
    clear(root);
    root = copy(other.root);
    return *this;
}

RGBAPixel Quadtree::getPixel(int x, int y) const{
    return GPHelper(x, y, root);
}

RGBAPixel Quadtree::GPHelper(int x, int y, QuadtreeNode *croot) const{
    if(croot->nwChild == NULL)
        return croot->element;
    else if(x < croot->res/2){
        if(y < croot->res/2)
            return GPHelper(x, y, croot->nwChild);
        return GPHelper(x, y - croot->res/2, croot->swChild);
    }
    else{
        if(y < croot->res/2)
            return GPHelper(x - croot->res/2, y, croot->neChild);
        return GPHelper(x - croot->res/2, y - croot->res/2, croot->seChild);
    }
}

PNG Quadtree::decompress() const{
    if(root == NULL)
        return PNG();
    int resolution = root->res;
    PNG retVal(resolution, resolution);
    for(size_t i = 0; i < retVal.height(); i++){
        for(size_t j = 0; j < retVal.width(); j++){
            *(retVal(i, j)) = getPixel(i, j);
        }
    }
    return retVal;
}

void Quadtree::clockwiseRotate(){}

void Quadtree::prune(int tolerance){}

int Quadtree::pruneSize(int tolerance) const{return 0;}

int Quadtree::idealPrune(int numLeaves) const{return 0;}
